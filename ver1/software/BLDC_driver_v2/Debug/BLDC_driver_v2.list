
BLDC_driver_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001490  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001550  08001550  00011550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080015a4  080015a4  000115a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080015a8  080015a8  000115a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080015ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000064  20000004  080015b0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000068  080015b0  00020068  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e375  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e08  00000000  00000000  0002e3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005407  00000000  00000000  000301a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000680  00000000  00000000  000355b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a08  00000000  00000000  00035c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003c47  00000000  00000000  00036638  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000285c  00000000  00000000  0003a27f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003cadb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000137c  00000000  00000000  0003cb58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001538 	.word	0x08001538

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001538 	.word	0x08001538

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000234:	b510      	push	{r4, lr}
 8000236:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000238:	f000 fbe0 	bl	80009fc <HAL_RCC_GetHCLKFreq>
 800023c:	21fa      	movs	r1, #250	; 0xfa
 800023e:	0089      	lsls	r1, r1, #2
 8000240:	f7ff ff6c 	bl	800011c <__udivsi3>
 8000244:	f000 f866 	bl	8000314 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000248:	2001      	movs	r0, #1
 800024a:	2200      	movs	r2, #0
 800024c:	0021      	movs	r1, r4
 800024e:	4240      	negs	r0, r0
 8000250:	f000 f830 	bl	80002b4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000254:	2000      	movs	r0, #0
 8000256:	bd10      	pop	{r4, pc}

08000258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000258:	2310      	movs	r3, #16
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_Init+0x1c>)
{
 800025c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000260:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000262:	430b      	orrs	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000266:	f7ff ffe5 	bl	8000234 <HAL_InitTick>
  HAL_MspInit();
 800026a:	f000 ffd9 	bl	8001220 <HAL_MspInit>
}
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000024 	.word	0x20000024

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000024 	.word	0x20000024

08000294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000296:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000298:	f7ff fff6 	bl	8000288 <HAL_GetTick>
  uint32_t wait = Delay;
 800029c:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800029e:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002a0:	1c63      	adds	r3, r4, #1
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	4193      	sbcs	r3, r2
 80002a6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002a8:	f7ff ffee 	bl	8000288 <HAL_GetTick>
 80002ac:	1b40      	subs	r0, r0, r5
 80002ae:	42a0      	cmp	r0, r4
 80002b0:	d3fa      	bcc.n	80002a8 <HAL_Delay+0x14>
  {
  }
}
 80002b2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002b8:	2800      	cmp	r0, #0
 80002ba:	da14      	bge.n	80002e6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	230f      	movs	r3, #15
 80002be:	b2c0      	uxtb	r0, r0
 80002c0:	4003      	ands	r3, r0
 80002c2:	3b08      	subs	r3, #8
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <HAL_NVIC_SetPriority+0x58>)
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	189b      	adds	r3, r3, r2
 80002cc:	2203      	movs	r2, #3
 80002ce:	4010      	ands	r0, r2
 80002d0:	4090      	lsls	r0, r2
 80002d2:	32fc      	adds	r2, #252	; 0xfc
 80002d4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002d6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002da:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002dc:	69dc      	ldr	r4, [r3, #28]
 80002de:	43ac      	bics	r4, r5
 80002e0:	4321      	orrs	r1, r4
 80002e2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002e4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e6:	2503      	movs	r5, #3
 80002e8:	0883      	lsrs	r3, r0, #2
 80002ea:	4028      	ands	r0, r5
 80002ec:	40a8      	lsls	r0, r5
 80002ee:	35fc      	adds	r5, #252	; 0xfc
 80002f0:	002e      	movs	r6, r5
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <HAL_NVIC_SetPriority+0x5c>)
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	189b      	adds	r3, r3, r2
 80002f8:	22c0      	movs	r2, #192	; 0xc0
 80002fa:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fc:	4029      	ands	r1, r5
 80002fe:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	589c      	ldr	r4, [r3, r2]
 8000304:	43b4      	bics	r4, r6
 8000306:	4321      	orrs	r1, r4
 8000308:	5099      	str	r1, [r3, r2]
 800030a:	e7eb      	b.n	80002e4 <HAL_NVIC_SetPriority+0x30>
 800030c:	e000ed00 	.word	0xe000ed00
 8000310:	e000e100 	.word	0xe000e100

08000314 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000314:	4a09      	ldr	r2, [pc, #36]	; (800033c <HAL_SYSTICK_Config+0x28>)
 8000316:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000318:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800031a:	4293      	cmp	r3, r2
 800031c:	d80d      	bhi.n	800033a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000320:	4a07      	ldr	r2, [pc, #28]	; (8000340 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000322:	4808      	ldr	r0, [pc, #32]	; (8000344 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000324:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	6a03      	ldr	r3, [r0, #32]
 8000328:	0609      	lsls	r1, r1, #24
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	430b      	orrs	r3, r1
 8000330:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000332:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000334:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000336:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000338:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800033a:	4770      	bx	lr
 800033c:	00ffffff 	.word	0x00ffffff
 8000340:	e000e010 	.word	0xe000e010
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000348:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034a:	680b      	ldr	r3, [r1, #0]
{ 
 800034c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000350:	2300      	movs	r3, #0
{ 
 8000352:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000354:	9a02      	ldr	r2, [sp, #8]
 8000356:	40da      	lsrs	r2, r3
 8000358:	d101      	bne.n	800035e <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800035a:	b007      	add	sp, #28
 800035c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800035e:	2201      	movs	r2, #1
 8000360:	409a      	lsls	r2, r3
 8000362:	9203      	str	r2, [sp, #12]
 8000364:	9903      	ldr	r1, [sp, #12]
 8000366:	9a02      	ldr	r2, [sp, #8]
 8000368:	400a      	ands	r2, r1
 800036a:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800036c:	d100      	bne.n	8000370 <HAL_GPIO_Init+0x28>
 800036e:	e088      	b.n	8000482 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000370:	9a01      	ldr	r2, [sp, #4]
 8000372:	2110      	movs	r1, #16
 8000374:	6852      	ldr	r2, [r2, #4]
 8000376:	0016      	movs	r6, r2
 8000378:	438e      	bics	r6, r1
 800037a:	2e02      	cmp	r6, #2
 800037c:	d10e      	bne.n	800039c <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800037e:	2507      	movs	r5, #7
 8000380:	401d      	ands	r5, r3
 8000382:	00ad      	lsls	r5, r5, #2
 8000384:	3901      	subs	r1, #1
 8000386:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000388:	08dc      	lsrs	r4, r3, #3
 800038a:	00a4      	lsls	r4, r4, #2
 800038c:	1904      	adds	r4, r0, r4
 800038e:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000390:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000392:	9901      	ldr	r1, [sp, #4]
 8000394:	6909      	ldr	r1, [r1, #16]
 8000396:	40a9      	lsls	r1, r5
 8000398:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800039a:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800039c:	2403      	movs	r4, #3
 800039e:	005f      	lsls	r7, r3, #1
 80003a0:	40bc      	lsls	r4, r7
 80003a2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003a4:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a6:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003a8:	4025      	ands	r5, r4
 80003aa:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ac:	2503      	movs	r5, #3
 80003ae:	4015      	ands	r5, r2
 80003b0:	40bd      	lsls	r5, r7
 80003b2:	4661      	mov	r1, ip
 80003b4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003b6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b8:	2e01      	cmp	r6, #1
 80003ba:	d80f      	bhi.n	80003dc <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003bc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003be:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003c0:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003c2:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003c4:	40bd      	lsls	r5, r7
 80003c6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003c8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003ca:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003cc:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ce:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003d0:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003d2:	2101      	movs	r1, #1
 80003d4:	400d      	ands	r5, r1
 80003d6:	409d      	lsls	r5, r3
 80003d8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003da:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80003dc:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003de:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003e0:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003e2:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e4:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003e6:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e8:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003ea:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80003ec:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003ee:	420a      	tst	r2, r1
 80003f0:	d047      	beq.n	8000482 <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	2101      	movs	r1, #1
 80003f4:	4c24      	ldr	r4, [pc, #144]	; (8000488 <HAL_GPIO_Init+0x140>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003f6:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f8:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003fa:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fc:	430d      	orrs	r5, r1
 80003fe:	61a5      	str	r5, [r4, #24]
 8000400:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000402:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000404:	400c      	ands	r4, r1
 8000406:	9405      	str	r4, [sp, #20]
 8000408:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040a:	240f      	movs	r4, #15
 800040c:	491f      	ldr	r1, [pc, #124]	; (800048c <HAL_GPIO_Init+0x144>)
 800040e:	00ad      	lsls	r5, r5, #2
 8000410:	00b6      	lsls	r6, r6, #2
 8000412:	186d      	adds	r5, r5, r1
 8000414:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000416:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000418:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041a:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041c:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041e:	2400      	movs	r4, #0
 8000420:	4288      	cmp	r0, r1
 8000422:	d008      	beq.n	8000436 <HAL_GPIO_Init+0xee>
 8000424:	491a      	ldr	r1, [pc, #104]	; (8000490 <HAL_GPIO_Init+0x148>)
 8000426:	3401      	adds	r4, #1
 8000428:	4288      	cmp	r0, r1
 800042a:	d004      	beq.n	8000436 <HAL_GPIO_Init+0xee>
 800042c:	4919      	ldr	r1, [pc, #100]	; (8000494 <HAL_GPIO_Init+0x14c>)
 800042e:	3404      	adds	r4, #4
 8000430:	4288      	cmp	r0, r1
 8000432:	d100      	bne.n	8000436 <HAL_GPIO_Init+0xee>
 8000434:	3c03      	subs	r4, #3
 8000436:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000438:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043a:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 800043c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 800043e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000440:	4c15      	ldr	r4, [pc, #84]	; (8000498 <HAL_GPIO_Init+0x150>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000442:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000444:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000446:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000448:	03d1      	lsls	r1, r2, #15
 800044a:	d401      	bmi.n	8000450 <HAL_GPIO_Init+0x108>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800044c:	003e      	movs	r6, r7
 800044e:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000450:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000452:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000454:	9e00      	ldr	r6, [sp, #0]
 8000456:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000458:	0391      	lsls	r1, r2, #14
 800045a:	d401      	bmi.n	8000460 <HAL_GPIO_Init+0x118>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800045c:	003e      	movs	r6, r7
 800045e:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000460:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000462:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000464:	9e00      	ldr	r6, [sp, #0]
 8000466:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000468:	02d1      	lsls	r1, r2, #11
 800046a:	d401      	bmi.n	8000470 <HAL_GPIO_Init+0x128>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800046c:	003e      	movs	r6, r7
 800046e:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000470:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000472:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000474:	9f00      	ldr	r7, [sp, #0]
 8000476:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000478:	0292      	lsls	r2, r2, #10
 800047a:	d401      	bmi.n	8000480 <HAL_GPIO_Init+0x138>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800047c:	402e      	ands	r6, r5
 800047e:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000480:	60e7      	str	r7, [r4, #12]
    position++;
 8000482:	3301      	adds	r3, #1
 8000484:	e766      	b.n	8000354 <HAL_GPIO_Init+0xc>
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000
 8000490:	48000400 	.word	0x48000400
 8000494:	48000800 	.word	0x48000800
 8000498:	40010400 	.word	0x40010400

0800049c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800049c:	2a00      	cmp	r2, #0
 800049e:	d001      	beq.n	80004a4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004a0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004a2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004a4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004a6:	e7fc      	b.n	80004a2 <HAL_GPIO_WritePin+0x6>

080004a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004aa:	6803      	ldr	r3, [r0, #0]
{
 80004ac:	b085      	sub	sp, #20
 80004ae:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b0:	07db      	lsls	r3, r3, #31
 80004b2:	d42f      	bmi.n	8000514 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004b4:	682b      	ldr	r3, [r5, #0]
 80004b6:	079b      	lsls	r3, r3, #30
 80004b8:	d500      	bpl.n	80004bc <HAL_RCC_OscConfig+0x14>
 80004ba:	e081      	b.n	80005c0 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004bc:	682b      	ldr	r3, [r5, #0]
 80004be:	071b      	lsls	r3, r3, #28
 80004c0:	d500      	bpl.n	80004c4 <HAL_RCC_OscConfig+0x1c>
 80004c2:	e0bc      	b.n	800063e <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004c4:	682b      	ldr	r3, [r5, #0]
 80004c6:	075b      	lsls	r3, r3, #29
 80004c8:	d500      	bpl.n	80004cc <HAL_RCC_OscConfig+0x24>
 80004ca:	e0df      	b.n	800068c <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80004cc:	682b      	ldr	r3, [r5, #0]
 80004ce:	06db      	lsls	r3, r3, #27
 80004d0:	d51a      	bpl.n	8000508 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80004d2:	696a      	ldr	r2, [r5, #20]
 80004d4:	4cb5      	ldr	r4, [pc, #724]	; (80007ac <HAL_RCC_OscConfig+0x304>)
 80004d6:	2304      	movs	r3, #4
 80004d8:	2a01      	cmp	r2, #1
 80004da:	d000      	beq.n	80004de <HAL_RCC_OscConfig+0x36>
 80004dc:	e14b      	b.n	8000776 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80004de:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80004e0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80004e2:	430b      	orrs	r3, r1
 80004e4:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80004e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80004e8:	431a      	orrs	r2, r3
 80004ea:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80004ec:	f7ff fecc 	bl	8000288 <HAL_GetTick>
 80004f0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80004f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80004f4:	4233      	tst	r3, r6
 80004f6:	d100      	bne.n	80004fa <HAL_RCC_OscConfig+0x52>
 80004f8:	e136      	b.n	8000768 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80004fa:	21f8      	movs	r1, #248	; 0xf8
 80004fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80004fe:	69ab      	ldr	r3, [r5, #24]
 8000500:	438a      	bics	r2, r1
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	4313      	orrs	r3, r2
 8000506:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000508:	6a29      	ldr	r1, [r5, #32]
 800050a:	2900      	cmp	r1, #0
 800050c:	d000      	beq.n	8000510 <HAL_RCC_OscConfig+0x68>
 800050e:	e159      	b.n	80007c4 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000510:	2000      	movs	r0, #0
 8000512:	e013      	b.n	800053c <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000514:	210c      	movs	r1, #12
 8000516:	4ca5      	ldr	r4, [pc, #660]	; (80007ac <HAL_RCC_OscConfig+0x304>)
 8000518:	6862      	ldr	r2, [r4, #4]
 800051a:	400a      	ands	r2, r1
 800051c:	2a04      	cmp	r2, #4
 800051e:	d006      	beq.n	800052e <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000520:	6863      	ldr	r3, [r4, #4]
 8000522:	400b      	ands	r3, r1
 8000524:	2b08      	cmp	r3, #8
 8000526:	d10b      	bne.n	8000540 <HAL_RCC_OscConfig+0x98>
 8000528:	6863      	ldr	r3, [r4, #4]
 800052a:	03db      	lsls	r3, r3, #15
 800052c:	d508      	bpl.n	8000540 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	039b      	lsls	r3, r3, #14
 8000532:	d5bf      	bpl.n	80004b4 <HAL_RCC_OscConfig+0xc>
 8000534:	686b      	ldr	r3, [r5, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d1bc      	bne.n	80004b4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800053a:	2001      	movs	r0, #1
}
 800053c:	b005      	add	sp, #20
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000540:	686b      	ldr	r3, [r5, #4]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d113      	bne.n	800056e <HAL_RCC_OscConfig+0xc6>
 8000546:	2380      	movs	r3, #128	; 0x80
 8000548:	6822      	ldr	r2, [r4, #0]
 800054a:	025b      	lsls	r3, r3, #9
 800054c:	4313      	orrs	r3, r2
 800054e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000550:	f7ff fe9a 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000554:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000556:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000558:	02b6      	lsls	r6, r6, #10
 800055a:	6823      	ldr	r3, [r4, #0]
 800055c:	4233      	tst	r3, r6
 800055e:	d1a9      	bne.n	80004b4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000560:	f7ff fe92 	bl	8000288 <HAL_GetTick>
 8000564:	1bc0      	subs	r0, r0, r7
 8000566:	2864      	cmp	r0, #100	; 0x64
 8000568:	d9f7      	bls.n	800055a <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 800056a:	2003      	movs	r0, #3
 800056c:	e7e6      	b.n	800053c <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800056e:	2b00      	cmp	r3, #0
 8000570:	d116      	bne.n	80005a0 <HAL_RCC_OscConfig+0xf8>
 8000572:	6823      	ldr	r3, [r4, #0]
 8000574:	4a8e      	ldr	r2, [pc, #568]	; (80007b0 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000576:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000578:	4013      	ands	r3, r2
 800057a:	6023      	str	r3, [r4, #0]
 800057c:	6823      	ldr	r3, [r4, #0]
 800057e:	4a8d      	ldr	r2, [pc, #564]	; (80007b4 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000580:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000582:	4013      	ands	r3, r2
 8000584:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000586:	f7ff fe7f 	bl	8000288 <HAL_GetTick>
 800058a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	4233      	tst	r3, r6
 8000590:	d100      	bne.n	8000594 <HAL_RCC_OscConfig+0xec>
 8000592:	e78f      	b.n	80004b4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000594:	f7ff fe78 	bl	8000288 <HAL_GetTick>
 8000598:	1bc0      	subs	r0, r0, r7
 800059a:	2864      	cmp	r0, #100	; 0x64
 800059c:	d9f6      	bls.n	800058c <HAL_RCC_OscConfig+0xe4>
 800059e:	e7e4      	b.n	800056a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d105      	bne.n	80005b0 <HAL_RCC_OscConfig+0x108>
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	6822      	ldr	r2, [r4, #0]
 80005a8:	02db      	lsls	r3, r3, #11
 80005aa:	4313      	orrs	r3, r2
 80005ac:	6023      	str	r3, [r4, #0]
 80005ae:	e7ca      	b.n	8000546 <HAL_RCC_OscConfig+0x9e>
 80005b0:	6823      	ldr	r3, [r4, #0]
 80005b2:	4a7f      	ldr	r2, [pc, #508]	; (80007b0 <HAL_RCC_OscConfig+0x308>)
 80005b4:	4013      	ands	r3, r2
 80005b6:	6023      	str	r3, [r4, #0]
 80005b8:	6823      	ldr	r3, [r4, #0]
 80005ba:	4a7e      	ldr	r2, [pc, #504]	; (80007b4 <HAL_RCC_OscConfig+0x30c>)
 80005bc:	4013      	ands	r3, r2
 80005be:	e7c6      	b.n	800054e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005c0:	220c      	movs	r2, #12
 80005c2:	4c7a      	ldr	r4, [pc, #488]	; (80007ac <HAL_RCC_OscConfig+0x304>)
 80005c4:	6863      	ldr	r3, [r4, #4]
 80005c6:	4213      	tst	r3, r2
 80005c8:	d006      	beq.n	80005d8 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005ca:	6863      	ldr	r3, [r4, #4]
 80005cc:	4013      	ands	r3, r2
 80005ce:	2b08      	cmp	r3, #8
 80005d0:	d110      	bne.n	80005f4 <HAL_RCC_OscConfig+0x14c>
 80005d2:	6863      	ldr	r3, [r4, #4]
 80005d4:	03db      	lsls	r3, r3, #15
 80005d6:	d40d      	bmi.n	80005f4 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005d8:	6823      	ldr	r3, [r4, #0]
 80005da:	079b      	lsls	r3, r3, #30
 80005dc:	d502      	bpl.n	80005e4 <HAL_RCC_OscConfig+0x13c>
 80005de:	68eb      	ldr	r3, [r5, #12]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d1aa      	bne.n	800053a <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005e4:	21f8      	movs	r1, #248	; 0xf8
 80005e6:	6822      	ldr	r2, [r4, #0]
 80005e8:	692b      	ldr	r3, [r5, #16]
 80005ea:	438a      	bics	r2, r1
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	4313      	orrs	r3, r2
 80005f0:	6023      	str	r3, [r4, #0]
 80005f2:	e763      	b.n	80004bc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005f4:	68ea      	ldr	r2, [r5, #12]
 80005f6:	2301      	movs	r3, #1
 80005f8:	2a00      	cmp	r2, #0
 80005fa:	d00f      	beq.n	800061c <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 80005fc:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005fe:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000600:	4313      	orrs	r3, r2
 8000602:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000604:	f7ff fe40 	bl	8000288 <HAL_GetTick>
 8000608:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800060a:	6823      	ldr	r3, [r4, #0]
 800060c:	4233      	tst	r3, r6
 800060e:	d1e9      	bne.n	80005e4 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000610:	f7ff fe3a 	bl	8000288 <HAL_GetTick>
 8000614:	1bc0      	subs	r0, r0, r7
 8000616:	2802      	cmp	r0, #2
 8000618:	d9f7      	bls.n	800060a <HAL_RCC_OscConfig+0x162>
 800061a:	e7a6      	b.n	800056a <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 800061c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800061e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000620:	439a      	bics	r2, r3
 8000622:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000624:	f7ff fe30 	bl	8000288 <HAL_GetTick>
 8000628:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800062a:	6823      	ldr	r3, [r4, #0]
 800062c:	4233      	tst	r3, r6
 800062e:	d100      	bne.n	8000632 <HAL_RCC_OscConfig+0x18a>
 8000630:	e744      	b.n	80004bc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000632:	f7ff fe29 	bl	8000288 <HAL_GetTick>
 8000636:	1bc0      	subs	r0, r0, r7
 8000638:	2802      	cmp	r0, #2
 800063a:	d9f6      	bls.n	800062a <HAL_RCC_OscConfig+0x182>
 800063c:	e795      	b.n	800056a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800063e:	69ea      	ldr	r2, [r5, #28]
 8000640:	2301      	movs	r3, #1
 8000642:	4c5a      	ldr	r4, [pc, #360]	; (80007ac <HAL_RCC_OscConfig+0x304>)
 8000644:	2a00      	cmp	r2, #0
 8000646:	d010      	beq.n	800066a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000648:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800064a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800064c:	4313      	orrs	r3, r2
 800064e:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000650:	f7ff fe1a 	bl	8000288 <HAL_GetTick>
 8000654:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000658:	4233      	tst	r3, r6
 800065a:	d000      	beq.n	800065e <HAL_RCC_OscConfig+0x1b6>
 800065c:	e732      	b.n	80004c4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800065e:	f7ff fe13 	bl	8000288 <HAL_GetTick>
 8000662:	1bc0      	subs	r0, r0, r7
 8000664:	2802      	cmp	r0, #2
 8000666:	d9f6      	bls.n	8000656 <HAL_RCC_OscConfig+0x1ae>
 8000668:	e77f      	b.n	800056a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 800066a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800066c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800066e:	439a      	bics	r2, r3
 8000670:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000672:	f7ff fe09 	bl	8000288 <HAL_GetTick>
 8000676:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800067a:	4233      	tst	r3, r6
 800067c:	d100      	bne.n	8000680 <HAL_RCC_OscConfig+0x1d8>
 800067e:	e721      	b.n	80004c4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000680:	f7ff fe02 	bl	8000288 <HAL_GetTick>
 8000684:	1bc0      	subs	r0, r0, r7
 8000686:	2802      	cmp	r0, #2
 8000688:	d9f6      	bls.n	8000678 <HAL_RCC_OscConfig+0x1d0>
 800068a:	e76e      	b.n	800056a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800068c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800068e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000690:	4c46      	ldr	r4, [pc, #280]	; (80007ac <HAL_RCC_OscConfig+0x304>)
 8000692:	0552      	lsls	r2, r2, #21
 8000694:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000696:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000698:	4213      	tst	r3, r2
 800069a:	d108      	bne.n	80006ae <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	69e3      	ldr	r3, [r4, #28]
 800069e:	4313      	orrs	r3, r2
 80006a0:	61e3      	str	r3, [r4, #28]
 80006a2:	69e3      	ldr	r3, [r4, #28]
 80006a4:	4013      	ands	r3, r2
 80006a6:	9303      	str	r3, [sp, #12]
 80006a8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80006aa:	2301      	movs	r3, #1
 80006ac:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006ae:	2780      	movs	r7, #128	; 0x80
 80006b0:	4e41      	ldr	r6, [pc, #260]	; (80007b8 <HAL_RCC_OscConfig+0x310>)
 80006b2:	007f      	lsls	r7, r7, #1
 80006b4:	6833      	ldr	r3, [r6, #0]
 80006b6:	423b      	tst	r3, r7
 80006b8:	d006      	beq.n	80006c8 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ba:	68ab      	ldr	r3, [r5, #8]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d113      	bne.n	80006e8 <HAL_RCC_OscConfig+0x240>
 80006c0:	6a22      	ldr	r2, [r4, #32]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	6223      	str	r3, [r4, #32]
 80006c6:	e030      	b.n	800072a <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006c8:	6833      	ldr	r3, [r6, #0]
 80006ca:	433b      	orrs	r3, r7
 80006cc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006ce:	f7ff fddb 	bl	8000288 <HAL_GetTick>
 80006d2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006d4:	6833      	ldr	r3, [r6, #0]
 80006d6:	423b      	tst	r3, r7
 80006d8:	d1ef      	bne.n	80006ba <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006da:	f7ff fdd5 	bl	8000288 <HAL_GetTick>
 80006de:	9b01      	ldr	r3, [sp, #4]
 80006e0:	1ac0      	subs	r0, r0, r3
 80006e2:	2864      	cmp	r0, #100	; 0x64
 80006e4:	d9f6      	bls.n	80006d4 <HAL_RCC_OscConfig+0x22c>
 80006e6:	e740      	b.n	800056a <HAL_RCC_OscConfig+0xc2>
 80006e8:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d114      	bne.n	8000718 <HAL_RCC_OscConfig+0x270>
 80006ee:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006f0:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006f2:	4393      	bics	r3, r2
 80006f4:	6223      	str	r3, [r4, #32]
 80006f6:	6a23      	ldr	r3, [r4, #32]
 80006f8:	3203      	adds	r2, #3
 80006fa:	4393      	bics	r3, r2
 80006fc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006fe:	f7ff fdc3 	bl	8000288 <HAL_GetTick>
 8000702:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000704:	6a23      	ldr	r3, [r4, #32]
 8000706:	423b      	tst	r3, r7
 8000708:	d025      	beq.n	8000756 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800070a:	f7ff fdbd 	bl	8000288 <HAL_GetTick>
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <HAL_RCC_OscConfig+0x314>)
 8000710:	1b80      	subs	r0, r0, r6
 8000712:	4298      	cmp	r0, r3
 8000714:	d9f6      	bls.n	8000704 <HAL_RCC_OscConfig+0x25c>
 8000716:	e728      	b.n	800056a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000718:	2b05      	cmp	r3, #5
 800071a:	d10b      	bne.n	8000734 <HAL_RCC_OscConfig+0x28c>
 800071c:	6a21      	ldr	r1, [r4, #32]
 800071e:	3b01      	subs	r3, #1
 8000720:	430b      	orrs	r3, r1
 8000722:	6223      	str	r3, [r4, #32]
 8000724:	6a23      	ldr	r3, [r4, #32]
 8000726:	431a      	orrs	r2, r3
 8000728:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 800072a:	f7ff fdad 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800072e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000730:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000732:	e00d      	b.n	8000750 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000734:	6a23      	ldr	r3, [r4, #32]
 8000736:	4393      	bics	r3, r2
 8000738:	2204      	movs	r2, #4
 800073a:	6223      	str	r3, [r4, #32]
 800073c:	6a23      	ldr	r3, [r4, #32]
 800073e:	4393      	bics	r3, r2
 8000740:	e7c0      	b.n	80006c4 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000742:	f7ff fda1 	bl	8000288 <HAL_GetTick>
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <HAL_RCC_OscConfig+0x314>)
 8000748:	1b80      	subs	r0, r0, r6
 800074a:	4298      	cmp	r0, r3
 800074c:	d900      	bls.n	8000750 <HAL_RCC_OscConfig+0x2a8>
 800074e:	e70c      	b.n	800056a <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000750:	6a23      	ldr	r3, [r4, #32]
 8000752:	423b      	tst	r3, r7
 8000754:	d0f5      	beq.n	8000742 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000756:	9b00      	ldr	r3, [sp, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d000      	beq.n	800075e <HAL_RCC_OscConfig+0x2b6>
 800075c:	e6b6      	b.n	80004cc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800075e:	69e3      	ldr	r3, [r4, #28]
 8000760:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <HAL_RCC_OscConfig+0x318>)
 8000762:	4013      	ands	r3, r2
 8000764:	61e3      	str	r3, [r4, #28]
 8000766:	e6b1      	b.n	80004cc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000768:	f7ff fd8e 	bl	8000288 <HAL_GetTick>
 800076c:	1bc0      	subs	r0, r0, r7
 800076e:	2802      	cmp	r0, #2
 8000770:	d800      	bhi.n	8000774 <HAL_RCC_OscConfig+0x2cc>
 8000772:	e6be      	b.n	80004f2 <HAL_RCC_OscConfig+0x4a>
 8000774:	e6f9      	b.n	800056a <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000776:	3205      	adds	r2, #5
 8000778:	d103      	bne.n	8000782 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 800077a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800077c:	439a      	bics	r2, r3
 800077e:	6362      	str	r2, [r4, #52]	; 0x34
 8000780:	e6bb      	b.n	80004fa <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000782:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000784:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000786:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000788:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800078a:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800078c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800078e:	4393      	bics	r3, r2
 8000790:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000792:	f7ff fd79 	bl	8000288 <HAL_GetTick>
 8000796:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800079a:	4233      	tst	r3, r6
 800079c:	d100      	bne.n	80007a0 <HAL_RCC_OscConfig+0x2f8>
 800079e:	e6b3      	b.n	8000508 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80007a0:	f7ff fd72 	bl	8000288 <HAL_GetTick>
 80007a4:	1bc0      	subs	r0, r0, r7
 80007a6:	2802      	cmp	r0, #2
 80007a8:	d9f6      	bls.n	8000798 <HAL_RCC_OscConfig+0x2f0>
 80007aa:	e6de      	b.n	800056a <HAL_RCC_OscConfig+0xc2>
 80007ac:	40021000 	.word	0x40021000
 80007b0:	fffeffff 	.word	0xfffeffff
 80007b4:	fffbffff 	.word	0xfffbffff
 80007b8:	40007000 	.word	0x40007000
 80007bc:	00001388 	.word	0x00001388
 80007c0:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007c4:	220c      	movs	r2, #12
 80007c6:	4c26      	ldr	r4, [pc, #152]	; (8000860 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 80007c8:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007ca:	6863      	ldr	r3, [r4, #4]
 80007cc:	4013      	ands	r3, r2
 80007ce:	2b08      	cmp	r3, #8
 80007d0:	d100      	bne.n	80007d4 <HAL_RCC_OscConfig+0x32c>
 80007d2:	e6b3      	b.n	800053c <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 80007d4:	6823      	ldr	r3, [r4, #0]
 80007d6:	4a23      	ldr	r2, [pc, #140]	; (8000864 <HAL_RCC_OscConfig+0x3bc>)
 80007d8:	4013      	ands	r3, r2
 80007da:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007dc:	2902      	cmp	r1, #2
 80007de:	d12f      	bne.n	8000840 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 80007e0:	f7ff fd52 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007e4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80007e6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007e8:	04b6      	lsls	r6, r6, #18
 80007ea:	6823      	ldr	r3, [r4, #0]
 80007ec:	4233      	tst	r3, r6
 80007ee:	d121      	bne.n	8000834 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80007f0:	220f      	movs	r2, #15
 80007f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80007f4:	4393      	bics	r3, r2
 80007f6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80007f8:	4313      	orrs	r3, r2
 80007fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80007fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000800:	6862      	ldr	r2, [r4, #4]
 8000802:	430b      	orrs	r3, r1
 8000804:	4918      	ldr	r1, [pc, #96]	; (8000868 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000806:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000808:	400a      	ands	r2, r1
 800080a:	4313      	orrs	r3, r2
 800080c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	6822      	ldr	r2, [r4, #0]
 8000812:	045b      	lsls	r3, r3, #17
 8000814:	4313      	orrs	r3, r2
 8000816:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000818:	f7ff fd36 	bl	8000288 <HAL_GetTick>
 800081c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800081e:	04ad      	lsls	r5, r5, #18
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	422b      	tst	r3, r5
 8000824:	d000      	beq.n	8000828 <HAL_RCC_OscConfig+0x380>
 8000826:	e673      	b.n	8000510 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000828:	f7ff fd2e 	bl	8000288 <HAL_GetTick>
 800082c:	1b80      	subs	r0, r0, r6
 800082e:	2802      	cmp	r0, #2
 8000830:	d9f6      	bls.n	8000820 <HAL_RCC_OscConfig+0x378>
 8000832:	e69a      	b.n	800056a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000834:	f7ff fd28 	bl	8000288 <HAL_GetTick>
 8000838:	1bc0      	subs	r0, r0, r7
 800083a:	2802      	cmp	r0, #2
 800083c:	d9d5      	bls.n	80007ea <HAL_RCC_OscConfig+0x342>
 800083e:	e694      	b.n	800056a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000840:	f7ff fd22 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000844:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000846:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000848:	04ad      	lsls	r5, r5, #18
 800084a:	6823      	ldr	r3, [r4, #0]
 800084c:	422b      	tst	r3, r5
 800084e:	d100      	bne.n	8000852 <HAL_RCC_OscConfig+0x3aa>
 8000850:	e65e      	b.n	8000510 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000852:	f7ff fd19 	bl	8000288 <HAL_GetTick>
 8000856:	1b80      	subs	r0, r0, r6
 8000858:	2802      	cmp	r0, #2
 800085a:	d9f6      	bls.n	800084a <HAL_RCC_OscConfig+0x3a2>
 800085c:	e685      	b.n	800056a <HAL_RCC_OscConfig+0xc2>
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40021000 	.word	0x40021000
 8000864:	feffffff 	.word	0xfeffffff
 8000868:	ffc2ffff 	.word	0xffc2ffff

0800086c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800086c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800086e:	4c14      	ldr	r4, [pc, #80]	; (80008c0 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000870:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000872:	2210      	movs	r2, #16
 8000874:	0021      	movs	r1, r4
 8000876:	4668      	mov	r0, sp
 8000878:	f000 fe4c 	bl	8001514 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800087c:	0021      	movs	r1, r4
 800087e:	ad04      	add	r5, sp, #16
 8000880:	2210      	movs	r2, #16
 8000882:	3110      	adds	r1, #16
 8000884:	0028      	movs	r0, r5
 8000886:	f000 fe45 	bl	8001514 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800088a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800088c:	4e0d      	ldr	r6, [pc, #52]	; (80008c4 <HAL_RCC_GetSysClockFreq+0x58>)
 800088e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000890:	401a      	ands	r2, r3
 8000892:	2a08      	cmp	r2, #8
 8000894:	d111      	bne.n	80008ba <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000896:	200f      	movs	r0, #15
 8000898:	466a      	mov	r2, sp
 800089a:	0c99      	lsrs	r1, r3, #18
 800089c:	4001      	ands	r1, r0
 800089e:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80008a0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80008a2:	4002      	ands	r2, r0
 80008a4:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80008a6:	03db      	lsls	r3, r3, #15
 80008a8:	d505      	bpl.n	80008b6 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80008aa:	4807      	ldr	r0, [pc, #28]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x5c>)
 80008ac:	f7ff fc36 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80008b0:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80008b2:	b008      	add	sp, #32
 80008b4:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <HAL_RCC_GetSysClockFreq+0x60>)
 80008b8:	e7fa      	b.n	80008b0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 80008ba:	4803      	ldr	r0, [pc, #12]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80008bc:	e7f9      	b.n	80008b2 <HAL_RCC_GetSysClockFreq+0x46>
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	08001550 	.word	0x08001550
 80008c4:	40021000 	.word	0x40021000
 80008c8:	007a1200 	.word	0x007a1200
 80008cc:	003d0900 	.word	0x003d0900

080008d0 <HAL_RCC_ClockConfig>:
{
 80008d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008d2:	2201      	movs	r2, #1
 80008d4:	4c43      	ldr	r4, [pc, #268]	; (80009e4 <HAL_RCC_ClockConfig+0x114>)
{
 80008d6:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008d8:	6823      	ldr	r3, [r4, #0]
{
 80008da:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008dc:	4013      	ands	r3, r2
 80008de:	428b      	cmp	r3, r1
 80008e0:	d31c      	bcc.n	800091c <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008e2:	6832      	ldr	r2, [r6, #0]
 80008e4:	0793      	lsls	r3, r2, #30
 80008e6:	d423      	bmi.n	8000930 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008e8:	07d3      	lsls	r3, r2, #31
 80008ea:	d429      	bmi.n	8000940 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ec:	2301      	movs	r3, #1
 80008ee:	6822      	ldr	r2, [r4, #0]
 80008f0:	401a      	ands	r2, r3
 80008f2:	4297      	cmp	r7, r2
 80008f4:	d367      	bcc.n	80009c6 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008f6:	6833      	ldr	r3, [r6, #0]
 80008f8:	4c3b      	ldr	r4, [pc, #236]	; (80009e8 <HAL_RCC_ClockConfig+0x118>)
 80008fa:	075b      	lsls	r3, r3, #29
 80008fc:	d46a      	bmi.n	80009d4 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80008fe:	f7ff ffb5 	bl	800086c <HAL_RCC_GetSysClockFreq>
 8000902:	6863      	ldr	r3, [r4, #4]
 8000904:	4a39      	ldr	r2, [pc, #228]	; (80009ec <HAL_RCC_ClockConfig+0x11c>)
 8000906:	061b      	lsls	r3, r3, #24
 8000908:	0f1b      	lsrs	r3, r3, #28
 800090a:	5cd3      	ldrb	r3, [r2, r3]
 800090c:	40d8      	lsrs	r0, r3
 800090e:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <HAL_RCC_ClockConfig+0x120>)
 8000910:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff fc8e 	bl	8000234 <HAL_InitTick>
  return HAL_OK;
 8000918:	2000      	movs	r0, #0
 800091a:	e008      	b.n	800092e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800091c:	6823      	ldr	r3, [r4, #0]
 800091e:	4393      	bics	r3, r2
 8000920:	430b      	orrs	r3, r1
 8000922:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	4013      	ands	r3, r2
 8000928:	4299      	cmp	r1, r3
 800092a:	d0da      	beq.n	80008e2 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 800092c:	2001      	movs	r0, #1
}
 800092e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000930:	20f0      	movs	r0, #240	; 0xf0
 8000932:	492d      	ldr	r1, [pc, #180]	; (80009e8 <HAL_RCC_ClockConfig+0x118>)
 8000934:	684b      	ldr	r3, [r1, #4]
 8000936:	4383      	bics	r3, r0
 8000938:	68b0      	ldr	r0, [r6, #8]
 800093a:	4303      	orrs	r3, r0
 800093c:	604b      	str	r3, [r1, #4]
 800093e:	e7d3      	b.n	80008e8 <HAL_RCC_ClockConfig+0x18>
 8000940:	4d29      	ldr	r5, [pc, #164]	; (80009e8 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000942:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000944:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000946:	2a01      	cmp	r2, #1
 8000948:	d11a      	bne.n	8000980 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800094a:	039b      	lsls	r3, r3, #14
 800094c:	d5ee      	bpl.n	800092c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800094e:	2103      	movs	r1, #3
 8000950:	686b      	ldr	r3, [r5, #4]
 8000952:	438b      	bics	r3, r1
 8000954:	4313      	orrs	r3, r2
 8000956:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000958:	f7ff fc96 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800095c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800095e:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000960:	2b01      	cmp	r3, #1
 8000962:	d115      	bne.n	8000990 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000964:	220c      	movs	r2, #12
 8000966:	686b      	ldr	r3, [r5, #4]
 8000968:	4013      	ands	r3, r2
 800096a:	2b04      	cmp	r3, #4
 800096c:	d0be      	beq.n	80008ec <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800096e:	f7ff fc8b 	bl	8000288 <HAL_GetTick>
 8000972:	9b01      	ldr	r3, [sp, #4]
 8000974:	1ac0      	subs	r0, r0, r3
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <HAL_RCC_ClockConfig+0x124>)
 8000978:	4298      	cmp	r0, r3
 800097a:	d9f3      	bls.n	8000964 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 800097c:	2003      	movs	r0, #3
 800097e:	e7d6      	b.n	800092e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000980:	2a02      	cmp	r2, #2
 8000982:	d102      	bne.n	800098a <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	d4e2      	bmi.n	800094e <HAL_RCC_ClockConfig+0x7e>
 8000988:	e7d0      	b.n	800092c <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800098a:	079b      	lsls	r3, r3, #30
 800098c:	d4df      	bmi.n	800094e <HAL_RCC_ClockConfig+0x7e>
 800098e:	e7cd      	b.n	800092c <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000990:	2b02      	cmp	r3, #2
 8000992:	d012      	beq.n	80009ba <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000994:	220c      	movs	r2, #12
 8000996:	686b      	ldr	r3, [r5, #4]
 8000998:	4213      	tst	r3, r2
 800099a:	d0a7      	beq.n	80008ec <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800099c:	f7ff fc74 	bl	8000288 <HAL_GetTick>
 80009a0:	9b01      	ldr	r3, [sp, #4]
 80009a2:	1ac0      	subs	r0, r0, r3
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <HAL_RCC_ClockConfig+0x124>)
 80009a6:	4298      	cmp	r0, r3
 80009a8:	d9f4      	bls.n	8000994 <HAL_RCC_ClockConfig+0xc4>
 80009aa:	e7e7      	b.n	800097c <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ac:	f7ff fc6c 	bl	8000288 <HAL_GetTick>
 80009b0:	9b01      	ldr	r3, [sp, #4]
 80009b2:	1ac0      	subs	r0, r0, r3
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_RCC_ClockConfig+0x124>)
 80009b6:	4298      	cmp	r0, r3
 80009b8:	d8e0      	bhi.n	800097c <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009ba:	220c      	movs	r2, #12
 80009bc:	686b      	ldr	r3, [r5, #4]
 80009be:	4013      	ands	r3, r2
 80009c0:	2b08      	cmp	r3, #8
 80009c2:	d1f3      	bne.n	80009ac <HAL_RCC_ClockConfig+0xdc>
 80009c4:	e792      	b.n	80008ec <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009c6:	6822      	ldr	r2, [r4, #0]
 80009c8:	439a      	bics	r2, r3
 80009ca:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009cc:	6822      	ldr	r2, [r4, #0]
 80009ce:	421a      	tst	r2, r3
 80009d0:	d1ac      	bne.n	800092c <HAL_RCC_ClockConfig+0x5c>
 80009d2:	e790      	b.n	80008f6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80009d4:	6863      	ldr	r3, [r4, #4]
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_RCC_ClockConfig+0x128>)
 80009d8:	4013      	ands	r3, r2
 80009da:	68f2      	ldr	r2, [r6, #12]
 80009dc:	4313      	orrs	r3, r2
 80009de:	6063      	str	r3, [r4, #4]
 80009e0:	e78d      	b.n	80008fe <HAL_RCC_ClockConfig+0x2e>
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40022000 	.word	0x40022000
 80009e8:	40021000 	.word	0x40021000
 80009ec:	08001594 	.word	0x08001594
 80009f0:	20000000 	.word	0x20000000
 80009f4:	00001388 	.word	0x00001388
 80009f8:	fffff8ff 	.word	0xfffff8ff

080009fc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80009fc:	4b01      	ldr	r3, [pc, #4]	; (8000a04 <HAL_RCC_GetHCLKFreq+0x8>)
 80009fe:	6818      	ldr	r0, [r3, #0]
}
 8000a00:	4770      	bx	lr
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	20000000 	.word	0x20000000

08000a08 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a08:	2201      	movs	r2, #1
 8000a0a:	6a03      	ldr	r3, [r0, #32]
{
 8000a0c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a0e:	4393      	bics	r3, r2
 8000a10:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a12:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000a14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000a16:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000a18:	3272      	adds	r2, #114	; 0x72
 8000a1a:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000a1c:	680a      	ldr	r2, [r1, #0]
 8000a1e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8000a20:	2202      	movs	r2, #2
 8000a22:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000a24:	688a      	ldr	r2, [r1, #8]
 8000a26:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000a28:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <TIM_OC1_SetConfig+0x68>)
 8000a2a:	4290      	cmp	r0, r2
 8000a2c:	d005      	beq.n	8000a3a <TIM_OC1_SetConfig+0x32>
 8000a2e:	4e11      	ldr	r6, [pc, #68]	; (8000a74 <TIM_OC1_SetConfig+0x6c>)
 8000a30:	42b0      	cmp	r0, r6
 8000a32:	d002      	beq.n	8000a3a <TIM_OC1_SetConfig+0x32>
 8000a34:	4e10      	ldr	r6, [pc, #64]	; (8000a78 <TIM_OC1_SetConfig+0x70>)
 8000a36:	42b0      	cmp	r0, r6
 8000a38:	d113      	bne.n	8000a62 <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8000a3a:	2608      	movs	r6, #8
 8000a3c:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000a3e:	68ce      	ldr	r6, [r1, #12]
 8000a40:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8000a42:	2604      	movs	r6, #4
 8000a44:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000a46:	4290      	cmp	r0, r2
 8000a48:	d005      	beq.n	8000a56 <TIM_OC1_SetConfig+0x4e>
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <TIM_OC1_SetConfig+0x6c>)
 8000a4c:	4290      	cmp	r0, r2
 8000a4e:	d002      	beq.n	8000a56 <TIM_OC1_SetConfig+0x4e>
 8000a50:	4a09      	ldr	r2, [pc, #36]	; (8000a78 <TIM_OC1_SetConfig+0x70>)
 8000a52:	4290      	cmp	r0, r2
 8000a54:	d105      	bne.n	8000a62 <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a58:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000a5a:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a5c:	694c      	ldr	r4, [r1, #20]
 8000a5e:	4334      	orrs	r4, r6
 8000a60:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000a62:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8000a64:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000a66:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000a68:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000a6a:	6203      	str	r3, [r0, #32]
}
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	40012c00 	.word	0x40012c00
 8000a74:	40014400 	.word	0x40014400
 8000a78:	40014800 	.word	0x40014800
 8000a7c:	fffffcff 	.word	0xfffffcff

08000a80 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000a80:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000a82:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000a84:	6a03      	ldr	r3, [r0, #32]
 8000a86:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <TIM_OC3_SetConfig+0x60>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000a8c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000a8e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8000a90:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000a92:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000a94:	680d      	ldr	r5, [r1, #0]
 8000a96:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8000a98:	4d12      	ldr	r5, [pc, #72]	; (8000ae4 <TIM_OC3_SetConfig+0x64>)
 8000a9a:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000a9c:	688d      	ldr	r5, [r1, #8]
 8000a9e:	022d      	lsls	r5, r5, #8
 8000aa0:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000aa2:	4d11      	ldr	r5, [pc, #68]	; (8000ae8 <TIM_OC3_SetConfig+0x68>)
 8000aa4:	42a8      	cmp	r0, r5
 8000aa6:	d10e      	bne.n	8000ac6 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8000aa8:	4d10      	ldr	r5, [pc, #64]	; (8000aec <TIM_OC3_SetConfig+0x6c>)
 8000aaa:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000aac:	68cb      	ldr	r3, [r1, #12]
 8000aae:	021b      	lsls	r3, r3, #8
 8000ab0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8000ab2:	4d0f      	ldr	r5, [pc, #60]	; (8000af0 <TIM_OC3_SetConfig+0x70>)
 8000ab4:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000ab6:	4d0f      	ldr	r5, [pc, #60]	; (8000af4 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000ab8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000aba:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000abc:	698a      	ldr	r2, [r1, #24]
 8000abe:	4332      	orrs	r2, r6
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	432a      	orrs	r2, r5
 8000ac4:	e005      	b.n	8000ad2 <TIM_OC3_SetConfig+0x52>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000ac6:	4d0c      	ldr	r5, [pc, #48]	; (8000af8 <TIM_OC3_SetConfig+0x78>)
 8000ac8:	42a8      	cmp	r0, r5
 8000aca:	d0f4      	beq.n	8000ab6 <TIM_OC3_SetConfig+0x36>
 8000acc:	4d0b      	ldr	r5, [pc, #44]	; (8000afc <TIM_OC3_SetConfig+0x7c>)
 8000ace:	42a8      	cmp	r0, r5
 8000ad0:	d0f1      	beq.n	8000ab6 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ad2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000ad4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000ad6:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000ad8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ada:	6203      	str	r3, [r0, #32]
}
 8000adc:	bd70      	pop	{r4, r5, r6, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	fffffeff 	.word	0xfffffeff
 8000ae4:	fffffdff 	.word	0xfffffdff
 8000ae8:	40012c00 	.word	0x40012c00
 8000aec:	fffff7ff 	.word	0xfffff7ff
 8000af0:	fffffbff 	.word	0xfffffbff
 8000af4:	ffffcfff 	.word	0xffffcfff
 8000af8:	40014400 	.word	0x40014400
 8000afc:	40014800 	.word	0x40014800

08000b00 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000b00:	6a03      	ldr	r3, [r0, #32]
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <TIM_OC4_SetConfig+0x4c>)
{
 8000b04:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000b06:	4013      	ands	r3, r2
 8000b08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b0a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000b0c:	4c10      	ldr	r4, [pc, #64]	; (8000b50 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8000b0e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8000b10:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000b12:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000b14:	680c      	ldr	r4, [r1, #0]
 8000b16:	0224      	lsls	r4, r4, #8
 8000b18:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8000b1a:	4c0e      	ldr	r4, [pc, #56]	; (8000b54 <TIM_OC4_SetConfig+0x54>)
 8000b1c:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000b1e:	688c      	ldr	r4, [r1, #8]
 8000b20:	0324      	lsls	r4, r4, #12
 8000b22:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000b24:	4c0c      	ldr	r4, [pc, #48]	; (8000b58 <TIM_OC4_SetConfig+0x58>)
 8000b26:	42a0      	cmp	r0, r4
 8000b28:	d005      	beq.n	8000b36 <TIM_OC4_SetConfig+0x36>
 8000b2a:	4c0c      	ldr	r4, [pc, #48]	; (8000b5c <TIM_OC4_SetConfig+0x5c>)
 8000b2c:	42a0      	cmp	r0, r4
 8000b2e:	d002      	beq.n	8000b36 <TIM_OC4_SetConfig+0x36>
 8000b30:	4c0b      	ldr	r4, [pc, #44]	; (8000b60 <TIM_OC4_SetConfig+0x60>)
 8000b32:	42a0      	cmp	r0, r4
 8000b34:	d104      	bne.n	8000b40 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000b36:	4c0b      	ldr	r4, [pc, #44]	; (8000b64 <TIM_OC4_SetConfig+0x64>)
 8000b38:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000b3a:	694c      	ldr	r4, [r1, #20]
 8000b3c:	01a4      	lsls	r4, r4, #6
 8000b3e:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b40:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000b42:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000b44:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000b46:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b48:	6202      	str	r2, [r0, #32]
}
 8000b4a:	bd30      	pop	{r4, r5, pc}
 8000b4c:	ffffefff 	.word	0xffffefff
 8000b50:	ffff8cff 	.word	0xffff8cff
 8000b54:	ffffdfff 	.word	0xffffdfff
 8000b58:	40012c00 	.word	0x40012c00
 8000b5c:	40014400 	.word	0x40014400
 8000b60:	40014800 	.word	0x40014800
 8000b64:	ffffbfff 	.word	0xffffbfff

08000b68 <HAL_TIM_PWM_MspInit>:
 8000b68:	4770      	bx	lr
	...

08000b6c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b6c:	4a1d      	ldr	r2, [pc, #116]	; (8000be4 <TIM_Base_SetConfig+0x78>)
{
 8000b6e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8000b70:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b72:	4290      	cmp	r0, r2
 8000b74:	d006      	beq.n	8000b84 <TIM_Base_SetConfig+0x18>
 8000b76:	2480      	movs	r4, #128	; 0x80
 8000b78:	05e4      	lsls	r4, r4, #23
 8000b7a:	42a0      	cmp	r0, r4
 8000b7c:	d002      	beq.n	8000b84 <TIM_Base_SetConfig+0x18>
 8000b7e:	4c1a      	ldr	r4, [pc, #104]	; (8000be8 <TIM_Base_SetConfig+0x7c>)
 8000b80:	42a0      	cmp	r0, r4
 8000b82:	d10c      	bne.n	8000b9e <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000b84:	2470      	movs	r4, #112	; 0x70
 8000b86:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8000b88:	684c      	ldr	r4, [r1, #4]
 8000b8a:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b8c:	4290      	cmp	r0, r2
 8000b8e:	d00f      	beq.n	8000bb0 <TIM_Base_SetConfig+0x44>
 8000b90:	2480      	movs	r4, #128	; 0x80
 8000b92:	05e4      	lsls	r4, r4, #23
 8000b94:	42a0      	cmp	r0, r4
 8000b96:	d00b      	beq.n	8000bb0 <TIM_Base_SetConfig+0x44>
 8000b98:	4c13      	ldr	r4, [pc, #76]	; (8000be8 <TIM_Base_SetConfig+0x7c>)
 8000b9a:	42a0      	cmp	r0, r4
 8000b9c:	d008      	beq.n	8000bb0 <TIM_Base_SetConfig+0x44>
 8000b9e:	4c13      	ldr	r4, [pc, #76]	; (8000bec <TIM_Base_SetConfig+0x80>)
 8000ba0:	42a0      	cmp	r0, r4
 8000ba2:	d005      	beq.n	8000bb0 <TIM_Base_SetConfig+0x44>
 8000ba4:	4c12      	ldr	r4, [pc, #72]	; (8000bf0 <TIM_Base_SetConfig+0x84>)
 8000ba6:	42a0      	cmp	r0, r4
 8000ba8:	d002      	beq.n	8000bb0 <TIM_Base_SetConfig+0x44>
 8000baa:	4c12      	ldr	r4, [pc, #72]	; (8000bf4 <TIM_Base_SetConfig+0x88>)
 8000bac:	42a0      	cmp	r0, r4
 8000bae:	d103      	bne.n	8000bb8 <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8000bb0:	4c11      	ldr	r4, [pc, #68]	; (8000bf8 <TIM_Base_SetConfig+0x8c>)
 8000bb2:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000bb4:	68cc      	ldr	r4, [r1, #12]
 8000bb6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000bb8:	2480      	movs	r4, #128	; 0x80
 8000bba:	43a3      	bics	r3, r4
 8000bbc:	694c      	ldr	r4, [r1, #20]
 8000bbe:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8000bc0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000bc2:	688b      	ldr	r3, [r1, #8]
 8000bc4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000bc6:	680b      	ldr	r3, [r1, #0]
 8000bc8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	d005      	beq.n	8000bda <TIM_Base_SetConfig+0x6e>
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <TIM_Base_SetConfig+0x84>)
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	d002      	beq.n	8000bda <TIM_Base_SetConfig+0x6e>
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <TIM_Base_SetConfig+0x88>)
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d101      	bne.n	8000bde <TIM_Base_SetConfig+0x72>
    TIMx->RCR = Structure->RepetitionCounter;
 8000bda:	690b      	ldr	r3, [r1, #16]
 8000bdc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000bde:	2301      	movs	r3, #1
 8000be0:	6143      	str	r3, [r0, #20]
}
 8000be2:	bd10      	pop	{r4, pc}
 8000be4:	40012c00 	.word	0x40012c00
 8000be8:	40000400 	.word	0x40000400
 8000bec:	40002000 	.word	0x40002000
 8000bf0:	40014400 	.word	0x40014400
 8000bf4:	40014800 	.word	0x40014800
 8000bf8:	fffffcff 	.word	0xfffffcff

08000bfc <HAL_TIM_Base_Init>:
{
 8000bfc:	b570      	push	{r4, r5, r6, lr}
 8000bfe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000c00:	2001      	movs	r0, #1
  if(htim == NULL)
 8000c02:	2c00      	cmp	r4, #0
 8000c04:	d014      	beq.n	8000c30 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000c06:	0025      	movs	r5, r4
 8000c08:	353d      	adds	r5, #61	; 0x3d
 8000c0a:	782b      	ldrb	r3, [r5, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d105      	bne.n	8000c1e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8000c12:	0022      	movs	r2, r4
 8000c14:	323c      	adds	r2, #60	; 0x3c
 8000c16:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8000c18:	0020      	movs	r0, r4
 8000c1a:	f000 fb51 	bl	80012c0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000c1e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c20:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000c22:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c24:	1d21      	adds	r1, r4, #4
 8000c26:	f7ff ffa1 	bl	8000b6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000c2a:	2301      	movs	r3, #1
  return HAL_OK;
 8000c2c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000c2e:	702b      	strb	r3, [r5, #0]
}
 8000c30:	bd70      	pop	{r4, r5, r6, pc}

08000c32 <HAL_TIM_PWM_Init>:
{
 8000c32:	b570      	push	{r4, r5, r6, lr}
 8000c34:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000c36:	2001      	movs	r0, #1
  if(htim == NULL)
 8000c38:	2c00      	cmp	r4, #0
 8000c3a:	d014      	beq.n	8000c66 <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000c3c:	0025      	movs	r5, r4
 8000c3e:	353d      	adds	r5, #61	; 0x3d
 8000c40:	782b      	ldrb	r3, [r5, #0]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d105      	bne.n	8000c54 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8000c48:	0022      	movs	r2, r4
 8000c4a:	323c      	adds	r2, #60	; 0x3c
 8000c4c:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8000c4e:	0020      	movs	r0, r4
 8000c50:	f7ff ff8a 	bl	8000b68 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000c54:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c56:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000c58:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c5a:	1d21      	adds	r1, r4, #4
 8000c5c:	f7ff ff86 	bl	8000b6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000c60:	2301      	movs	r3, #1
  return HAL_OK;
 8000c62:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000c64:	702b      	strb	r3, [r5, #0]
}
 8000c66:	bd70      	pop	{r4, r5, r6, pc}

08000c68 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c68:	2210      	movs	r2, #16
 8000c6a:	6a03      	ldr	r3, [r0, #32]
{
 8000c6c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c6e:	4393      	bics	r3, r2
 8000c70:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000c72:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000c74:	4d15      	ldr	r5, [pc, #84]	; (8000ccc <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8000c76:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000c78:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000c7a:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000c7c:	680d      	ldr	r5, [r1, #0]
 8000c7e:	022d      	lsls	r5, r5, #8
 8000c80:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8000c82:	2520      	movs	r5, #32
 8000c84:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000c86:	688d      	ldr	r5, [r1, #8]
 8000c88:	012d      	lsls	r5, r5, #4
 8000c8a:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000c8c:	4d10      	ldr	r5, [pc, #64]	; (8000cd0 <TIM_OC2_SetConfig+0x68>)
 8000c8e:	42a8      	cmp	r0, r5
 8000c90:	d10f      	bne.n	8000cb2 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8000c92:	2580      	movs	r5, #128	; 0x80
 8000c94:	43aa      	bics	r2, r5
 8000c96:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000c98:	68ca      	ldr	r2, [r1, #12]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8000c9e:	2540      	movs	r5, #64	; 0x40
 8000ca0:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000ca2:	4d0c      	ldr	r5, [pc, #48]	; (8000cd4 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000ca4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000ca6:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000ca8:	698b      	ldr	r3, [r1, #24]
 8000caa:	4333      	orrs	r3, r6
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	432b      	orrs	r3, r5
 8000cb0:	e005      	b.n	8000cbe <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000cb2:	4d09      	ldr	r5, [pc, #36]	; (8000cd8 <TIM_OC2_SetConfig+0x70>)
 8000cb4:	42a8      	cmp	r0, r5
 8000cb6:	d0f4      	beq.n	8000ca2 <TIM_OC2_SetConfig+0x3a>
 8000cb8:	4d08      	ldr	r5, [pc, #32]	; (8000cdc <TIM_OC2_SetConfig+0x74>)
 8000cba:	42a8      	cmp	r0, r5
 8000cbc:	d0f1      	beq.n	8000ca2 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8000cbe:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8000cc0:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000cc2:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000cc4:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000cc6:	6202      	str	r2, [r0, #32]
}
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	ffff8cff 	.word	0xffff8cff
 8000cd0:	40012c00 	.word	0x40012c00
 8000cd4:	fffff3ff 	.word	0xfffff3ff
 8000cd8:	40014400 	.word	0x40014400
 8000cdc:	40014800 	.word	0x40014800

08000ce0 <HAL_TIM_PWM_ConfigChannel>:
{
 8000ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8000ce2:	0006      	movs	r6, r0
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	363c      	adds	r6, #60	; 0x3c
{
 8000ce8:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8000cea:	7831      	ldrb	r1, [r6, #0]
{
 8000cec:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2901      	cmp	r1, #1
 8000cf2:	d025      	beq.n	8000d40 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8000cf4:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 8000cf6:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000cf8:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 8000cfa:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000cfc:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 8000cfe:	2a0c      	cmp	r2, #12
 8000d00:	d81a      	bhi.n	8000d38 <HAL_TIM_PWM_ConfigChannel+0x58>
 8000d02:	0010      	movs	r0, r2
 8000d04:	f7ff fa00 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000d08:	18181807 	.word	0x18181807
 8000d0c:	1818181d 	.word	0x1818181d
 8000d10:	1818182f 	.word	0x1818182f
 8000d14:	41          	.byte	0x41
 8000d15:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000d16:	0029      	movs	r1, r5
 8000d18:	6820      	ldr	r0, [r4, #0]
 8000d1a:	f7ff fe75 	bl	8000a08 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d1e:	2208      	movs	r2, #8
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	6999      	ldr	r1, [r3, #24]
 8000d24:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000d26:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d28:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000d2a:	699a      	ldr	r2, [r3, #24]
 8000d2c:	438a      	bics	r2, r1
 8000d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000d30:	699a      	ldr	r2, [r3, #24]
 8000d32:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000d34:	430a      	orrs	r2, r1
 8000d36:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000d38:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000d3a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000d3c:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 8000d3e:	7030      	strb	r0, [r6, #0]
}
 8000d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000d42:	0029      	movs	r1, r5
 8000d44:	6820      	ldr	r0, [r4, #0]
 8000d46:	f7ff ff8f 	bl	8000c68 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	6999      	ldr	r1, [r3, #24]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000d56:	699a      	ldr	r2, [r3, #24]
 8000d58:	4915      	ldr	r1, [pc, #84]	; (8000db0 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8000d5a:	400a      	ands	r2, r1
 8000d5c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000d5e:	692a      	ldr	r2, [r5, #16]
 8000d60:	6999      	ldr	r1, [r3, #24]
 8000d62:	0212      	lsls	r2, r2, #8
 8000d64:	e7e6      	b.n	8000d34 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000d66:	0029      	movs	r1, r5
 8000d68:	6820      	ldr	r0, [r4, #0]
 8000d6a:	f7ff fe89 	bl	8000a80 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000d6e:	2208      	movs	r2, #8
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	69d9      	ldr	r1, [r3, #28]
 8000d74:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000d76:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000d78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000d7a:	69da      	ldr	r2, [r3, #28]
 8000d7c:	438a      	bics	r2, r1
 8000d7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000d80:	69da      	ldr	r2, [r3, #28]
 8000d82:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000d84:	430a      	orrs	r2, r1
 8000d86:	61da      	str	r2, [r3, #28]
    break;
 8000d88:	e7d6      	b.n	8000d38 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000d8a:	0029      	movs	r1, r5
 8000d8c:	6820      	ldr	r0, [r4, #0]
 8000d8e:	f7ff feb7 	bl	8000b00 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	6823      	ldr	r3, [r4, #0]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	69d9      	ldr	r1, [r3, #28]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000d9e:	69da      	ldr	r2, [r3, #28]
 8000da0:	4903      	ldr	r1, [pc, #12]	; (8000db0 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8000da2:	400a      	ands	r2, r1
 8000da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000da6:	692a      	ldr	r2, [r5, #16]
 8000da8:	69d9      	ldr	r1, [r3, #28]
 8000daa:	0212      	lsls	r2, r2, #8
 8000dac:	e7ea      	b.n	8000d84 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	fffffbff 	.word	0xfffffbff

08000db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000db4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000db6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000db8:	4d03      	ldr	r5, [pc, #12]	; (8000dc8 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000dbe:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000dc4:	6083      	str	r3, [r0, #8]
}
 8000dc6:	bd30      	pop	{r4, r5, pc}
 8000dc8:	ffff00ff 	.word	0xffff00ff

08000dcc <HAL_TIM_ConfigClockSource>:
{
 8000dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8000dce:	0005      	movs	r5, r0
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	353c      	adds	r5, #60	; 0x3c
 8000dd4:	782a      	ldrb	r2, [r5, #0]
{
 8000dd6:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8000dd8:	0018      	movs	r0, r3
 8000dda:	2a01      	cmp	r2, #1
 8000ddc:	d019      	beq.n	8000e12 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8000dde:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8000de0:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8000de2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000de4:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8000de6:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000de8:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8000dea:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000dec:	4a4f      	ldr	r2, [pc, #316]	; (8000f2c <HAL_TIM_ConfigClockSource+0x160>)
 8000dee:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8000df0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000df2:	680b      	ldr	r3, [r1, #0]
 8000df4:	2b40      	cmp	r3, #64	; 0x40
 8000df6:	d100      	bne.n	8000dfa <HAL_TIM_ConfigClockSource+0x2e>
 8000df8:	e06f      	b.n	8000eda <HAL_TIM_ConfigClockSource+0x10e>
 8000dfa:	d816      	bhi.n	8000e2a <HAL_TIM_ConfigClockSource+0x5e>
 8000dfc:	2b10      	cmp	r3, #16
 8000dfe:	d100      	bne.n	8000e02 <HAL_TIM_ConfigClockSource+0x36>
 8000e00:	e087      	b.n	8000f12 <HAL_TIM_ConfigClockSource+0x146>
 8000e02:	d807      	bhi.n	8000e14 <HAL_TIM_ConfigClockSource+0x48>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d100      	bne.n	8000e0a <HAL_TIM_ConfigClockSource+0x3e>
 8000e08:	e07d      	b.n	8000f06 <HAL_TIM_ConfigClockSource+0x13a>
  htim->State = HAL_TIM_STATE_READY;
 8000e0a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000e0c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000e0e:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8000e10:	7028      	strb	r0, [r5, #0]
}
 8000e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8000e14:	2b20      	cmp	r3, #32
 8000e16:	d100      	bne.n	8000e1a <HAL_TIM_ConfigClockSource+0x4e>
 8000e18:	e081      	b.n	8000f1e <HAL_TIM_ConfigClockSource+0x152>
 8000e1a:	2b30      	cmp	r3, #48	; 0x30
 8000e1c:	d1f5      	bne.n	8000e0a <HAL_TIM_ConfigClockSource+0x3e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e1e:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000e20:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e22:	4393      	bics	r3, r2
 8000e24:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e26:	2337      	movs	r3, #55	; 0x37
 8000e28:	e055      	b.n	8000ed6 <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 8000e2a:	2b70      	cmp	r3, #112	; 0x70
 8000e2c:	d033      	beq.n	8000e96 <HAL_TIM_ConfigClockSource+0xca>
 8000e2e:	d81b      	bhi.n	8000e68 <HAL_TIM_ConfigClockSource+0x9c>
 8000e30:	2b50      	cmp	r3, #80	; 0x50
 8000e32:	d03b      	beq.n	8000eac <HAL_TIM_ConfigClockSource+0xe0>
 8000e34:	2b60      	cmp	r3, #96	; 0x60
 8000e36:	d1e8      	bne.n	8000e0a <HAL_TIM_ConfigClockSource+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e38:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000e3a:	684b      	ldr	r3, [r1, #4]
 8000e3c:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e3e:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000e40:	4f3b      	ldr	r7, [pc, #236]	; (8000f30 <HAL_TIM_ConfigClockSource+0x164>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e42:	43a1      	bics	r1, r4
 8000e44:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e46:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000e48:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000e4a:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000e4c:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e4e:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8000e50:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8000e52:	6182      	str	r2, [r0, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e54:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e56:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8000e5c:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000e5e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e60:	4393      	bics	r3, r2
 8000e62:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e64:	2367      	movs	r3, #103	; 0x67
 8000e66:	e036      	b.n	8000ed6 <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	0152      	lsls	r2, r2, #5
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d00d      	beq.n	8000e8c <HAL_TIM_ConfigClockSource+0xc0>
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	0192      	lsls	r2, r2, #6
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d1c8      	bne.n	8000e0a <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 8000e78:	68cb      	ldr	r3, [r1, #12]
 8000e7a:	684a      	ldr	r2, [r1, #4]
 8000e7c:	6889      	ldr	r1, [r1, #8]
 8000e7e:	f7ff ff99 	bl	8000db4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	6822      	ldr	r2, [r4, #0]
 8000e86:	01db      	lsls	r3, r3, #7
 8000e88:	6891      	ldr	r1, [r2, #8]
 8000e8a:	e00c      	b.n	8000ea6 <HAL_TIM_ConfigClockSource+0xda>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	6883      	ldr	r3, [r0, #8]
 8000e90:	4393      	bics	r3, r2
   TIMx->SMCR = tmpsmcr;
 8000e92:	6083      	str	r3, [r0, #8]
 8000e94:	e7b9      	b.n	8000e0a <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 8000e96:	68cb      	ldr	r3, [r1, #12]
 8000e98:	684a      	ldr	r2, [r1, #4]
 8000e9a:	6889      	ldr	r1, [r1, #8]
 8000e9c:	f7ff ff8a 	bl	8000db4 <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000ea0:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8000ea2:	6822      	ldr	r2, [r4, #0]
 8000ea4:	6893      	ldr	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000ea6:	430b      	orrs	r3, r1
 8000ea8:	6093      	str	r3, [r2, #8]
    break;
 8000eaa:	e7ae      	b.n	8000e0a <HAL_TIM_ConfigClockSource+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000eac:	684a      	ldr	r2, [r1, #4]
 8000eae:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8000eb0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000eb2:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000eb4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000eb6:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000eb8:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000eba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ebc:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ebe:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ec0:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ec2:	240a      	movs	r4, #10
 8000ec4:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8000ec6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000ec8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000eca:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ecc:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000ece:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ed0:	4393      	bics	r3, r2
 8000ed2:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ed4:	2357      	movs	r3, #87	; 0x57
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	e7db      	b.n	8000e92 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000eda:	684a      	ldr	r2, [r1, #4]
 8000edc:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8000ede:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ee0:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ee2:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ee4:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ee6:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ee8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000eea:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000eec:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000eee:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ef0:	240a      	movs	r4, #10
 8000ef2:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8000ef4:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000ef6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000ef8:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000efa:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000efc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000efe:	4393      	bics	r3, r2
 8000f00:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f02:	2347      	movs	r3, #71	; 0x47
 8000f04:	e7e7      	b.n	8000ed6 <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f06:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000f08:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f0a:	4393      	bics	r3, r2
 8000f0c:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	e7e1      	b.n	8000ed6 <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f12:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000f14:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f16:	4393      	bics	r3, r2
 8000f18:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f1a:	2317      	movs	r3, #23
 8000f1c:	e7db      	b.n	8000ed6 <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f1e:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000f20:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f22:	4393      	bics	r3, r2
 8000f24:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f26:	2327      	movs	r3, #39	; 0x27
 8000f28:	e7d5      	b.n	8000ed6 <HAL_TIM_ConfigClockSource+0x10a>
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	ffff0088 	.word	0xffff0088
 8000f30:	ffff0fff 	.word	0xffff0fff

08000f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8000f34:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8000f36:	2401      	movs	r4, #1
 8000f38:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000f3a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8000f3c:	6a03      	ldr	r3, [r0, #32]
 8000f3e:	43a3      	bics	r3, r4
 8000f40:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000f42:	6a03      	ldr	r3, [r0, #32]
 8000f44:	431a      	orrs	r2, r3
 8000f46:	6202      	str	r2, [r0, #32]
}
 8000f48:	bd10      	pop	{r4, pc}
	...

08000f4c <HAL_TIM_PWM_Start>:
{
 8000f4c:	b510      	push	{r4, lr}
 8000f4e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000f50:	2201      	movs	r2, #1
 8000f52:	6800      	ldr	r0, [r0, #0]
 8000f54:	f7ff ffee 	bl	8000f34 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_TIM_PWM_Start+0x38>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d005      	beq.n	8000f6c <HAL_TIM_PWM_Start+0x20>
 8000f60:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <HAL_TIM_PWM_Start+0x3c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d002      	beq.n	8000f6c <HAL_TIM_PWM_Start+0x20>
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <HAL_TIM_PWM_Start+0x40>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d104      	bne.n	8000f76 <HAL_TIM_PWM_Start+0x2a>
    __HAL_TIM_MOE_ENABLE(htim);
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000f70:	0212      	lsls	r2, r2, #8
 8000f72:	430a      	orrs	r2, r1
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8000f76:	2201      	movs	r2, #1
 8000f78:	6819      	ldr	r1, [r3, #0]
}
 8000f7a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	40012c00 	.word	0x40012c00
 8000f88:	40014400 	.word	0x40014400
 8000f8c:	40014800 	.word	0x40014800

08000f90 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8000f90:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 8000f92:	2404      	movs	r4, #4
 8000f94:	408c      	lsls	r4, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8000f96:	408a      	lsls	r2, r1
  TIMx->CCER &=  ~tmp;
 8000f98:	6a03      	ldr	r3, [r0, #32]
 8000f9a:	43a3      	bics	r3, r4
 8000f9c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8000f9e:	6a03      	ldr	r3, [r0, #32]
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	6202      	str	r2, [r0, #32]
}
 8000fa4:	bd10      	pop	{r4, pc}

08000fa6 <HAL_TIMEx_PWMN_Start>:
{
 8000fa6:	b510      	push	{r4, lr}
 8000fa8:	0004      	movs	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8000faa:	2204      	movs	r2, #4
 8000fac:	6800      	ldr	r0, [r0, #0]
 8000fae:	f7ff ffef 	bl	8000f90 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	0212      	lsls	r2, r2, #8
 8000fb8:	6c59      	ldr	r1, [r3, #68]	; 0x44
}
 8000fba:	2000      	movs	r0, #0
  __HAL_TIM_MOE_ENABLE(htim);
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]
}
 8000fc8:	bd10      	pop	{r4, pc}

08000fca <HAL_TIMEx_MasterConfigSynchronization>:
{
 8000fca:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8000fcc:	0004      	movs	r4, r0
 8000fce:	343c      	adds	r4, #60	; 0x3c
 8000fd0:	7822      	ldrb	r2, [r4, #0]
{
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8000fd6:	2a01      	cmp	r2, #1
 8000fd8:	d017      	beq.n	800100a <HAL_TIMEx_MasterConfigSynchronization+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8000fda:	001d      	movs	r5, r3
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000fdc:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000fde:	353d      	adds	r5, #61	; 0x3d
 8000fe0:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	306e      	adds	r0, #110	; 0x6e
 8000fe6:	4382      	bics	r2, r0
 8000fe8:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	6808      	ldr	r0, [r1, #0]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000fee:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000ff0:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000ff2:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000ff4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	4382      	bics	r2, r0
 8000ffa:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000ffc:	689a      	ldr	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8000ffe:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001000:	430a      	orrs	r2, r1
 8001002:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001004:	2301      	movs	r3, #1
 8001006:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001008:	7020      	strb	r0, [r4, #0]
}
 800100a:	bd30      	pop	{r4, r5, pc}

0800100c <HAL_TIMEx_ConfigBreakDeadTime>:
{
 800100c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800100e:	0004      	movs	r4, r0
 8001010:	343c      	adds	r4, #60	; 0x3c
 8001012:	7823      	ldrb	r3, [r4, #0]
{
 8001014:	0002      	movs	r2, r0
 8001016:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001018:	2b01      	cmp	r3, #1
 800101a:	d024      	beq.n	8001066 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800101c:	0015      	movs	r5, r2
 800101e:	353d      	adds	r5, #61	; 0x3d
 8001020:	7028      	strb	r0, [r5, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8001024:	68c8      	ldr	r0, [r1, #12]
  htim->Instance->BDTR = tmpbdtr;
 8001026:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001028:	4003      	ands	r3, r0
 800102a:	6888      	ldr	r0, [r1, #8]
 800102c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800102e:	480f      	ldr	r0, [pc, #60]	; (800106c <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8001030:	4003      	ands	r3, r0
 8001032:	6848      	ldr	r0, [r1, #4]
 8001034:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001036:	480e      	ldr	r0, [pc, #56]	; (8001070 <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 8001038:	4003      	ands	r3, r0
 800103a:	6808      	ldr	r0, [r1, #0]
 800103c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 8001040:	4003      	ands	r3, r0
 8001042:	6908      	ldr	r0, [r1, #16]
 8001044:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 8001048:	4003      	ands	r3, r0
 800104a:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800104c:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800104e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 8001052:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001054:	480a      	ldr	r0, [pc, #40]	; (8001080 <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001056:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001058:	4003      	ands	r3, r0
 800105a:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800105e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001060:	2301      	movs	r3, #1
 8001062:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001064:	7020      	strb	r0, [r4, #0]
}
 8001066:	bd30      	pop	{r4, r5, pc}
 8001068:	fffffcff 	.word	0xfffffcff
 800106c:	fffffbff 	.word	0xfffffbff
 8001070:	fffff7ff 	.word	0xfffff7ff
 8001074:	ffffefff 	.word	0xffffefff
 8001078:	ffffdfff 	.word	0xffffdfff
 800107c:	ffffbfff 	.word	0xffffbfff
 8001080:	ffff7fff 	.word	0xffff7fff

08001084 <MX_GPIO_Init>:
     PB1   ------> ADC_IN9
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001086:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	2214      	movs	r2, #20
 800108a:	2100      	movs	r1, #0
 800108c:	a803      	add	r0, sp, #12
 800108e:	f000 fa4a 	bl	8001526 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2080      	movs	r0, #128	; 0x80
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <MX_GPIO_Init+0x98>)
 8001096:	02c0      	lsls	r0, r0, #11
 8001098:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 800109a:	4f21      	ldr	r7, [pc, #132]	; (8001120 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4301      	orrs	r1, r0
 800109e:	6159      	str	r1, [r3, #20]
 80010a0:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2500      	movs	r5, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	9200      	str	r2, [sp, #0]
 80010aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	6959      	ldr	r1, [r3, #20]
 80010ae:	0280      	lsls	r0, r0, #10
 80010b0:	4301      	orrs	r1, r0
 80010b2:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b8:	03c9      	lsls	r1, r1, #15
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4002      	ands	r2, r0
 80010bc:	9201      	str	r2, [sp, #4]
 80010be:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010c0:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 80010c2:	0038      	movs	r0, r7
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010c4:	430a      	orrs	r2, r1
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010cc:	400b      	ands	r3, r1
 80010ce:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 80010d0:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010d2:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 80010d4:	f7ff f9e2 	bl	800049c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010d8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	4e12      	ldr	r6, [pc, #72]	; (8001124 <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010dc:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e0:	3301      	adds	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	0030      	movs	r0, r6

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2401      	movs	r4, #1
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f7ff f92d 	bl	8000348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ee:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010f0:	a903      	add	r1, sp, #12
 80010f2:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010fc:	f7ff f924 	bl	8000348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001100:	23c0      	movs	r3, #192	; 0xc0
 8001102:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001104:	3bae      	subs	r3, #174	; 0xae
 8001106:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110a:	3b0f      	subs	r3, #15
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	0030      	movs	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001110:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001112:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f7ff f918 	bl	8000348 <HAL_GPIO_Init>

}
 8001118:	b009      	add	sp, #36	; 0x24
 800111a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	48001400 	.word	0x48001400
 8001124:	48000400 	.word	0x48000400

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112a:	2610      	movs	r6, #16
{
 800112c:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	2230      	movs	r2, #48	; 0x30
 8001130:	2100      	movs	r1, #0
 8001132:	a804      	add	r0, sp, #16
 8001134:	f000 f9f7 	bl	8001526 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	0032      	movs	r2, r6
 800113a:	2100      	movs	r1, #0
 800113c:	4668      	mov	r0, sp
 800113e:	f000 f9f2 	bl	8001526 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001142:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001144:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001146:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001148:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800114c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114e:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001150:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001152:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001154:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001156:	f7ff f9a7 	bl	80004a8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115a:	2307      	movs	r3, #7
 800115c:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001160:	0029      	movs	r1, r5
 8001162:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001168:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800116a:	f7ff fbb1 	bl	80008d0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800116e:	b010      	add	sp, #64	; 0x40
 8001170:	bd70      	pop	{r4, r5, r6, pc}
	...

08001174 <main>:
{
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
	 uint16_t movement_tableU[6] = {49152,65535,49152,16384,0,16384};
 8001176:	4c26      	ldr	r4, [pc, #152]	; (8001210 <main+0x9c>)
{
 8001178:	b08b      	sub	sp, #44	; 0x2c
	 uint16_t movement_tableU[6] = {49152,65535,49152,16384,0,16384};
 800117a:	0021      	movs	r1, r4
 800117c:	220c      	movs	r2, #12
 800117e:	a801      	add	r0, sp, #4
 8001180:	f000 f9c8 	bl	8001514 <memcpy>
	  uint16_t movement_tableV[6] = {0,16384,49152,65535,49152,16384};
 8001184:	0021      	movs	r1, r4
 8001186:	ae04      	add	r6, sp, #16
 8001188:	310c      	adds	r1, #12
 800118a:	220c      	movs	r2, #12
 800118c:	0030      	movs	r0, r6
 800118e:	f000 f9c1 	bl	8001514 <memcpy>
	  uint16_t movement_tableW[6] = {49152,16384,0,16384,49152,65535};
 8001192:	0021      	movs	r1, r4
 8001194:	af07      	add	r7, sp, #28
 8001196:	220c      	movs	r2, #12
 8001198:	3118      	adds	r1, #24
 800119a:	0038      	movs	r0, r7
 800119c:	f000 f9ba 	bl	8001514 <memcpy>
  HAL_Init();
 80011a0:	f7ff f85a 	bl	8000258 <HAL_Init>
  SystemClock_Config();
 80011a4:	f7ff ffc0 	bl	8001128 <SystemClock_Config>
  MX_GPIO_Init();
 80011a8:	f7ff ff6c 	bl	8001084 <MX_GPIO_Init>
  MX_TIM1_Init();
 80011ac:	f000 f8de 	bl	800136c <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011b0:	4c18      	ldr	r4, [pc, #96]	; (8001214 <main+0xa0>)
 80011b2:	2100      	movs	r1, #0
 80011b4:	0020      	movs	r0, r4
 80011b6:	f7ff fec9 	bl	8000f4c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80011ba:	2100      	movs	r1, #0
 80011bc:	0020      	movs	r0, r4
 80011be:	f7ff fef2 	bl	8000fa6 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011c2:	2104      	movs	r1, #4
 80011c4:	0020      	movs	r0, r4
 80011c6:	f7ff fec1 	bl	8000f4c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80011ca:	2104      	movs	r1, #4
 80011cc:	0020      	movs	r0, r4
 80011ce:	f7ff feea 	bl	8000fa6 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80011d2:	2108      	movs	r1, #8
 80011d4:	0020      	movs	r0, r4
 80011d6:	f7ff feb9 	bl	8000f4c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80011da:	2108      	movs	r1, #8
 80011dc:	0020      	movs	r0, r4
 80011de:	f7ff fee2 	bl	8000fa6 <HAL_TIMEx_PWMN_Start>
	  for(i=0;i<6;i++){
 80011e2:	2300      	movs	r3, #0
 80011e4:	4d0c      	ldr	r5, [pc, #48]	; (8001218 <main+0xa4>)
 80011e6:	802b      	strh	r3, [r5, #0]
 80011e8:	882b      	ldrh	r3, [r5, #0]
 80011ea:	2b05      	cmp	r3, #5
 80011ec:	d8f9      	bhi.n	80011e2 <main+0x6e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,movement_tableU[i]);
 80011ee:	4669      	mov	r1, sp
		HAL_Delay(2000);
 80011f0:	20fa      	movs	r0, #250	; 0xfa
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,movement_tableU[i]);
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	3104      	adds	r1, #4
 80011f6:	6822      	ldr	r2, [r4, #0]
 80011f8:	5ac9      	ldrh	r1, [r1, r3]
		HAL_Delay(2000);
 80011fa:	00c0      	lsls	r0, r0, #3
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,movement_tableU[i]);
 80011fc:	6351      	str	r1, [r2, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,movement_tableV[i]);
 80011fe:	5af1      	ldrh	r1, [r6, r3]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,movement_tableW[i]);
 8001200:	5afb      	ldrh	r3, [r7, r3]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,movement_tableV[i]);
 8001202:	6391      	str	r1, [r2, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,movement_tableW[i]);
 8001204:	63d3      	str	r3, [r2, #60]	; 0x3c
		HAL_Delay(2000);
 8001206:	f7ff f845 	bl	8000294 <HAL_Delay>
	  for(i=0;i<6;i++){
 800120a:	882b      	ldrh	r3, [r5, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	e7ea      	b.n	80011e6 <main+0x72>
 8001210:	08001570 	.word	0x08001570
 8001214:	20000028 	.word	0x20000028
 8001218:	20000020 	.word	0x20000020

0800121c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800121c:	4770      	bx	lr
	...

08001220 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001220:	2001      	movs	r0, #1
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_MspInit+0x2c>)
{
 8001224:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	6999      	ldr	r1, [r3, #24]
 8001228:	4301      	orrs	r1, r0
 800122a:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	4002      	ands	r2, r0
 8001234:	9200      	str	r2, [sp, #0]
 8001236:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	430a      	orrs	r2, r1
 800123c:	61da      	str	r2, [r3, #28]
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	400b      	ands	r3, r1
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	b002      	add	sp, #8
 8001248:	4770      	bx	lr
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	40021000 	.word	0x40021000

08001250 <NMI_Handler>:
 8001250:	4770      	bx	lr

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler>

08001254 <SVC_Handler>:
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125a:	f7ff f80d 	bl	8000278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125e:	bd10      	pop	{r4, pc}

08001260 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001260:	2101      	movs	r1, #1
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001264:	4811      	ldr	r0, [pc, #68]	; (80012ac <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	4002      	ands	r2, r0
 8001270:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	480e      	ldr	r0, [pc, #56]	; (80012b0 <SystemInit+0x50>)
 8001276:	4002      	ands	r2, r0
 8001278:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <SystemInit+0x54>)
 800127e:	4002      	ands	r2, r0
 8001280:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <SystemInit+0x58>)
 8001286:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001288:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800128a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800128c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800128e:	4382      	bics	r2, r0
 8001290:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <SystemInit+0x5c>)
 8001296:	4002      	ands	r2, r0
 8001298:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800129a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800129c:	438a      	bics	r2, r1
 800129e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]

}
 80012a4:	4770      	bx	lr
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	40021000 	.word	0x40021000
 80012ac:	08ffb80c 	.word	0x08ffb80c
 80012b0:	fef6ffff 	.word	0xfef6ffff
 80012b4:	fffbffff 	.word	0xfffbffff
 80012b8:	ffc0ffff 	.word	0xffc0ffff
 80012bc:	fffffeec 	.word	0xfffffeec

080012c0 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_TIM_Base_MspInit+0x24>)
 80012c2:	6802      	ldr	r2, [r0, #0]
{
 80012c4:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d109      	bne.n	80012de <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ca:	2080      	movs	r0, #128	; 0x80
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <HAL_TIM_Base_MspInit+0x28>)
 80012ce:	0100      	lsls	r0, r0, #4
 80012d0:	6991      	ldr	r1, [r2, #24]
 80012d2:	4301      	orrs	r1, r0
 80012d4:	6191      	str	r1, [r2, #24]
 80012d6:	6993      	ldr	r3, [r2, #24]
 80012d8:	4003      	ands	r3, r0
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012de:	b002      	add	sp, #8
 80012e0:	4770      	bx	lr
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	40012c00 	.word	0x40012c00
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012ec:	b530      	push	{r4, r5, lr}
 80012ee:	0004      	movs	r4, r0
 80012f0:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	2214      	movs	r2, #20
 80012f4:	2100      	movs	r1, #0
 80012f6:	a803      	add	r0, sp, #12
 80012f8:	f000 f915 	bl	8001526 <memset>
  if(timHandle->Instance==TIM1)
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_TIM_MspPostInit+0x74>)
 80012fe:	6822      	ldr	r2, [r4, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d12b      	bne.n	800135c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	2080      	movs	r0, #128	; 0x80
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_TIM_MspPostInit+0x78>)
 8001308:	02c0      	lsls	r0, r0, #11
 800130a:	6959      	ldr	r1, [r3, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4301      	orrs	r1, r0
 8001310:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	0289      	lsls	r1, r1, #10
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4002      	ands	r2, r0
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001320:	2503      	movs	r5, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	430a      	orrs	r2, r1
 8001324:	615a      	str	r2, [r3, #20]
 8001326:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	480f      	ldr	r0, [pc, #60]	; (8001368 <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	400b      	ands	r3, r1
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001330:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800133c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f7ff f803 	bl	8000348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001342:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	a903      	add	r1, sp, #12
 800134e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001356:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f7fe fff6 	bl	8000348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800135c:	b009      	add	sp, #36	; 0x24
 800135e:	bd30      	pop	{r4, r5, pc}
 8001360:	40012c00 	.word	0x40012c00
 8001364:	40021000 	.word	0x40021000
 8001368:	48000400 	.word	0x48000400

0800136c <MX_TIM1_Init>:
{
 800136c:	b530      	push	{r4, r5, lr}
 800136e:	b095      	sub	sp, #84	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001370:	2210      	movs	r2, #16
 8001372:	2100      	movs	r1, #0
 8001374:	a802      	add	r0, sp, #8
 8001376:	f000 f8d6 	bl	8001526 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137a:	2208      	movs	r2, #8
 800137c:	2100      	movs	r1, #0
 800137e:	4668      	mov	r0, sp
 8001380:	f000 f8d1 	bl	8001526 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001384:	221c      	movs	r2, #28
 8001386:	2100      	movs	r1, #0
 8001388:	a806      	add	r0, sp, #24
 800138a:	f000 f8cc 	bl	8001526 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800138e:	221c      	movs	r2, #28
 8001390:	2100      	movs	r1, #0
 8001392:	a80d      	add	r0, sp, #52	; 0x34
 8001394:	f000 f8c7 	bl	8001526 <memset>
  htim1.Instance = TIM1;
 8001398:	4c34      	ldr	r4, [pc, #208]	; (800146c <MX_TIM1_Init+0x100>)
 800139a:	4b35      	ldr	r3, [pc, #212]	; (8001470 <MX_TIM1_Init+0x104>)
  htim1.Init.Period = 65535;
 800139c:	4d35      	ldr	r5, [pc, #212]	; (8001474 <MX_TIM1_Init+0x108>)
  htim1.Instance = TIM1;
 800139e:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a4:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013a6:	0020      	movs	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = 65535;
 80013aa:	60e5      	str	r5, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ae:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b2:	f7ff fc23 	bl	8000bfc <HAL_TIM_Base_Init>
 80013b6:	2800      	cmp	r0, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM1_Init+0x52>
    Error_Handler();
 80013ba:	f7ff ff2f 	bl	800121c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013be:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013c0:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c2:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013c4:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c6:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013c8:	f7ff fd00 	bl	8000dcc <HAL_TIM_ConfigClockSource>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x68>
    Error_Handler();
 80013d0:	f7ff ff24 	bl	800121c <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013d4:	0020      	movs	r0, r4
 80013d6:	f7ff fc2c 	bl	8000c32 <HAL_TIM_PWM_Init>
 80013da:	2800      	cmp	r0, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x76>
    Error_Handler();
 80013de:	f7ff ff1d 	bl	800121c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e4:	4669      	mov	r1, sp
 80013e6:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ec:	f7ff fded 	bl	8000fca <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0x8c>
    Error_Handler();
 80013f4:	f7ff ff12 	bl	800121c <Error_Handler>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f8:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fa:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	a906      	add	r1, sp, #24
 80013fe:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001400:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 65535;
 8001402:	9507      	str	r5, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001404:	9208      	str	r2, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001406:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001408:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800140a:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800140c:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800140e:	f7ff fc67 	bl	8000ce0 <HAL_TIM_PWM_ConfigChannel>
 8001412:	2800      	cmp	r0, #0
 8001414:	d001      	beq.n	800141a <MX_TIM1_Init+0xae>
    Error_Handler();
 8001416:	f7ff ff01 	bl	800121c <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800141a:	2204      	movs	r2, #4
 800141c:	a906      	add	r1, sp, #24
 800141e:	0020      	movs	r0, r4
 8001420:	f7ff fc5e 	bl	8000ce0 <HAL_TIM_PWM_ConfigChannel>
 8001424:	2800      	cmp	r0, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0xc0>
    Error_Handler();
 8001428:	f7ff fef8 	bl	800121c <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800142c:	2208      	movs	r2, #8
 800142e:	a906      	add	r1, sp, #24
 8001430:	0020      	movs	r0, r4
 8001432:	f7ff fc55 	bl	8000ce0 <HAL_TIM_PWM_ConfigChannel>
 8001436:	2800      	cmp	r0, #0
 8001438:	d001      	beq.n	800143e <MX_TIM1_Init+0xd2>
    Error_Handler();
 800143a:	f7ff feef 	bl	800121c <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800143e:	2280      	movs	r2, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001440:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001442:	0192      	lsls	r2, r2, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001444:	a90d      	add	r1, sp, #52	; 0x34
 8001446:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001448:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800144a:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800144c:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800144e:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001450:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001452:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001454:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001456:	f7ff fdd9 	bl	800100c <HAL_TIMEx_ConfigBreakDeadTime>
 800145a:	2800      	cmp	r0, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0xf6>
    Error_Handler();
 800145e:	f7ff fedd 	bl	800121c <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001462:	0020      	movs	r0, r4
 8001464:	f7ff ff42 	bl	80012ec <HAL_TIM_MspPostInit>
}
 8001468:	b015      	add	sp, #84	; 0x54
 800146a:	bd30      	pop	{r4, r5, pc}
 800146c:	20000028 	.word	0x20000028
 8001470:	40012c00 	.word	0x40012c00
 8001474:	0000ffff 	.word	0x0000ffff

08001478 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800147a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <LoopForever+0xe>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001494:	4c0b      	ldr	r4, [pc, #44]	; (80014c4 <LoopForever+0x16>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014a2:	f7ff fedd 	bl	8001260 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80014a6:	f000 f811 	bl	80014cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014aa:	f7ff fe63 	bl	8001174 <main>

080014ae <LoopForever>:

LoopForever:
    b LoopForever
 80014ae:	e7fe      	b.n	80014ae <LoopForever>
  ldr   r0, =_estack
 80014b0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80014bc:	080015ac 	.word	0x080015ac
  ldr r2, =_sbss
 80014c0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80014c4:	20000068 	.word	0x20000068

080014c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC1_IRQHandler>
	...

080014cc <__libc_init_array>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2600      	movs	r6, #0
 80014d0:	4d0c      	ldr	r5, [pc, #48]	; (8001504 <__libc_init_array+0x38>)
 80014d2:	4c0d      	ldr	r4, [pc, #52]	; (8001508 <__libc_init_array+0x3c>)
 80014d4:	1b64      	subs	r4, r4, r5
 80014d6:	10a4      	asrs	r4, r4, #2
 80014d8:	42a6      	cmp	r6, r4
 80014da:	d109      	bne.n	80014f0 <__libc_init_array+0x24>
 80014dc:	2600      	movs	r6, #0
 80014de:	f000 f82b 	bl	8001538 <_init>
 80014e2:	4d0a      	ldr	r5, [pc, #40]	; (800150c <__libc_init_array+0x40>)
 80014e4:	4c0a      	ldr	r4, [pc, #40]	; (8001510 <__libc_init_array+0x44>)
 80014e6:	1b64      	subs	r4, r4, r5
 80014e8:	10a4      	asrs	r4, r4, #2
 80014ea:	42a6      	cmp	r6, r4
 80014ec:	d105      	bne.n	80014fa <__libc_init_array+0x2e>
 80014ee:	bd70      	pop	{r4, r5, r6, pc}
 80014f0:	00b3      	lsls	r3, r6, #2
 80014f2:	58eb      	ldr	r3, [r5, r3]
 80014f4:	4798      	blx	r3
 80014f6:	3601      	adds	r6, #1
 80014f8:	e7ee      	b.n	80014d8 <__libc_init_array+0xc>
 80014fa:	00b3      	lsls	r3, r6, #2
 80014fc:	58eb      	ldr	r3, [r5, r3]
 80014fe:	4798      	blx	r3
 8001500:	3601      	adds	r6, #1
 8001502:	e7f2      	b.n	80014ea <__libc_init_array+0x1e>
 8001504:	080015a4 	.word	0x080015a4
 8001508:	080015a4 	.word	0x080015a4
 800150c:	080015a4 	.word	0x080015a4
 8001510:	080015a8 	.word	0x080015a8

08001514 <memcpy>:
 8001514:	2300      	movs	r3, #0
 8001516:	b510      	push	{r4, lr}
 8001518:	429a      	cmp	r2, r3
 800151a:	d100      	bne.n	800151e <memcpy+0xa>
 800151c:	bd10      	pop	{r4, pc}
 800151e:	5ccc      	ldrb	r4, [r1, r3]
 8001520:	54c4      	strb	r4, [r0, r3]
 8001522:	3301      	adds	r3, #1
 8001524:	e7f8      	b.n	8001518 <memcpy+0x4>

08001526 <memset>:
 8001526:	0003      	movs	r3, r0
 8001528:	1882      	adds	r2, r0, r2
 800152a:	4293      	cmp	r3, r2
 800152c:	d100      	bne.n	8001530 <memset+0xa>
 800152e:	4770      	bx	lr
 8001530:	7019      	strb	r1, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	e7f9      	b.n	800152a <memset+0x4>
	...

08001538 <_init>:
 8001538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153e:	bc08      	pop	{r3}
 8001540:	469e      	mov	lr, r3
 8001542:	4770      	bx	lr

08001544 <_fini>:
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154a:	bc08      	pop	{r3}
 800154c:	469e      	mov	lr, r3
 800154e:	4770      	bx	lr
